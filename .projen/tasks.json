{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "tsc --build"
        },
        {
          "exec": "next build"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));'  --experimental-specifier-resolution=node .projenrc.ts"
        }
      ]
    },
    "dev": {
      "name": "dev",
      "description": "Starts the Next.js application in development mode",
      "steps": [
        {
          "exec": "next dev"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ pages test build-tools projenrc .projenrc.ts",
          "receiveArgs": true
        }
      ]
    },
    "export": {
      "name": "export",
      "description": "Exports the application for production deployment",
      "steps": [
        {
          "exec": "next export"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "npm install"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "npm ci"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "exec": "npx next-sitemap --config next-sitemap.config.cjs"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "exec": "npx prisma generate"
        }
      ]
    },
    "server": {
      "name": "server",
      "description": "Starts the Next.js application in production mode",
      "steps": [
        {
          "exec": "next start"
        }
      ]
    },
    "telemetry": {
      "name": "telemetry",
      "description": "Checks the status of Next.js telemetry collection",
      "steps": [
        {
          "exec": "next telemetry"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "eslint"
        },
        {
          "exec": "vitest run"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=latest --peer --dep=dev,peer,prod,optional --filter=@faker-js/faker,@neodx/svg,@next/eslint-plugin-next,@pandacss/dev,@semantic-release/changelog,@semantic-release/commit-analyzer,@semantic-release/git,@semantic-release/release-notes-generator,@storybook/addon-essentials,@storybook/addon-interactions,@storybook/addon-links,@storybook/blocks,@storybook/jest,@storybook/nextjs,@storybook/react,@storybook/test,@testing-library/react,@types/gtag.js,@types/nodemailer,@types/react,@types/react-dom,@vitejs/plugin-react,classnames,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,eslint-plugin-storybook,jsdom,msw,prettier,prisma,projen,semantic-release-plus,storybook,storybook-addon-module-mock,storybook-addon-turbo-build,ts-node,tsconfig-paths-webpack-plugin,typescript,vitest,@aws-sdk/client-s3,@aws-sdk/s3-request-presigner,@dnd-kit/core,@dnd-kit/sortable,@hookform/resolvers,@mapbox/search-js-core,@opentelemetry/exporter-trace-otlp-http,@opentelemetry/instrumentation,@opentelemetry/resources,@opentelemetry/sdk-node,@opentelemetry/sdk-trace-base,@opentelemetry/sdk-trace-node,@opentelemetry/semantic-conventions,@prisma/client,@prisma/instrumentation,@sindresorhus/slugify,@stripe/react-stripe-js,@stripe/stripe-js,bullmq,date-fns,date-fns-tz,dotenv,kafkajs,next,next-auth,next-intl,next-sitemap,nodemailer,oslo,pino,react,react-day-picker,react-dom,react-hook-form,react-hot-toast,react-icons,react-map-gl,react-snap-carousel,sharp,stripe,use-debounce,uuid,zod,zod-form-data"
        },
        {
          "exec": "npm install"
        },
        {
          "exec": "npm update @faker-js/faker @google/semantic-release-replace-plugin @neodx/svg @next/eslint-plugin-next @pandacss/dev @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/git @semantic-release/release-notes-generator @storybook/addon-essentials @storybook/addon-interactions @storybook/addon-links @storybook/blocks @storybook/jest @storybook/nextjs @storybook/react @storybook/test @testing-library/react @types/gtag.js @types/node @types/nodemailer @types/react @types/react-dom @typescript-eslint/eslint-plugin @typescript-eslint/parser @vitejs/plugin-react classnames constructs eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint-plugin-storybook eslint jsdom msw msw-storybook-addon prettier prisma projen semantic-release-plus storybook storybook-addon-module-mock storybook-addon-turbo-build ts-node tsconfig-paths-webpack-plugin typescript vitest @aws-sdk/client-s3 @aws-sdk/s3-request-presigner @dnd-kit/core @dnd-kit/sortable @elastic/elasticsearch @elastic/transport @hookform/resolvers @mapbox/search-js-core @opentelemetry/exporter-trace-otlp-http @opentelemetry/instrumentation @opentelemetry/resources @opentelemetry/sdk-node @opentelemetry/sdk-trace-base @opentelemetry/sdk-trace-node @opentelemetry/semantic-conventions @prisma/client @prisma/instrumentation @sindresorhus/slugify @stripe/react-stripe-js @stripe/stripe-js bullmq date-fns date-fns-tz dotenv kafkajs mapbox-gl next next-auth next-intl next-sitemap nodemailer oslo pino react react-day-picker react-dom react-hook-form react-hot-toast react-icons react-map-gl react-snap-carousel sharp stripe use-debounce uuid zod zod-form-data"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
