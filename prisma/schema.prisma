generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(cuid())
  name                   String?
  email                  String                   @unique
  emailVerified          DateTime?
  stripeCustomerId       String?                  @unique
  image                  String?
  confirmed              Boolean                  @default(false)
  firstname              String?
  lastname               String?
  phoneNumber            String?
  description            String?
  gender                 UserGender?              @default(notSpecified)
  birthdate              DateTime?                @db.Date
  country                String?
  city                   String?
  position               String?
  company                String?
  interests              String[]
  socialLinks            UserSocialLink[]
  vk                     String?
  facebook               String?
  instagram              String?
  linkedin               String?
  telegram               String?
  website                String?
  role                   UserRole                 @default(user)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  events                 Event[]
  participant            UsersOnEvent[]
  places                 Place[]
  speaker                Speaker?
  accounts               Account[]
  sessions               Session[]
  eventComments          EventComment[]
  placeComments          PlaceComment[]
  speakerComments        SpeakerComment[]
  following              SpeakerFollower[]
  ticketIntents          TicketIntent[]
  moderationNotification ModerationNotification[]
  purchaseNotification   PurchaseNotification[]
  organizations          Organization[]
  likedEvents            UserLikedEvents[]
  slots                  PremiseSlot[]
}

enum UserRole {
  user
  admin
  organization
}

enum UserGender {
  male
  female
  notSpecified
}

model UserLikedEvents {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
}

model UserSocialLink {
  id      String        @id @default(cuid())
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  network SocialNetwork
  url     String
}

model Account {
  id                String       @id @unique @default(cuid())
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              ProviderType
  provider          String
  providerAccountId String
  refresh_token     String?      @db.Text
  access_token      String?      @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?      @db.Text
  session_state     String?
  emailToken        String?       @unique @default(cuid())

  @@unique([provider, providerAccountId])
}

enum ProviderType {
  oauth
  email
  credentials
}

model Session {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  sessionToken String   @unique
  expires      DateTime
}

model VerificationRequest {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Speaker {
  id          String            @id @default(cuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  participant SpeakersOnEvent[]
  comments    SpeakerComment[]
  followers   SpeakerFollower[]
}

model SpeakerComment {
  id        String   @id @default(cuid())
  speaker   Speaker  @relation(fields: [speakerId], references: [id])
  speakerId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Float    @default(0.00)
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SpeakerFollower {
  speaker    Speaker  @relation(fields: [speakerId], references: [id])
  speakerId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  followedAt DateTime @default(now())

  @@id([speakerId, userId])
}

model PurchaseNotification {
  id        String             @id @default(cuid())
  user      User?              @relation(fields: [userId], references: [id])
  userId    String?
  event     Event?             @relation(fields: [eventId], references: [id])
  eventId   String?
  viewed    Boolean            @default(false)
  status    TicketIntentStatus @default(progress)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ModerationNotification {
  id      String                       @id @default(cuid())
  user    User                         @relation(fields: [userId], references: [id])
  userId  String
  event   Event                        @relation(fields: [eventId], references: [id])
  eventId String
  viewed  Boolean                      @default(false)
  status  ModerationNotificationStatus @default(sent)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ModerationNotificationStatus {
  sent
  passed
  failed
}

model Event {
  id                     String                   @id @default(cuid())
  slug                   String                   @default("")
  topic                  String
  description            String
  status                 EventStatus              @default(unmoderated)
  initiator              User                     @relation(fields: [initiatorId], references: [id])
  initiatorId            String
  place                  Place                    @relation(fields: [placeId], references: [id])
  placeId                String
  starts                 DateTime                 @db.Timestamp
  duration               DateTime?                @db.Time
  poster                 String?
  price                  Float?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  tags                   String[]
  resources              EventResource[]
  comments               EventComment[]
  usersOnEvent           UsersOnEvent[]
  speakersOnEvent        SpeakersOnEvent[]
  ticketIntents          TicketIntent[]
  moderationNotification ModerationNotification[]
  purchaseNotification   PurchaseNotification[]
  usersLiked             UserLikedEvents[]
}

enum EventStatus {
  unmoderated
  active
  private
}

model EventComment {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Float    @default(0.00)
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventResource {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  height    Int      @default(200)
  width     Int      @default(100)
  url       String
  isPoster  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketIntent {
  id        String             @id
  event     Event              @relation(fields: [eventId], references: [id])
  eventId   String
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  status    TicketIntentStatus
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum TicketIntentStatus {
  failed
  progress
  succeed
  canceled
}

model UsersOnEvent {
  event    Event    @relation(fields: [eventId], references: [id])
  eventId  String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  joinedAt DateTime @default(now())

  @@id([userId, eventId])
}

model SpeakersOnEvent {
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  speaker   Speaker  @relation(fields: [speakerId], references: [id])
  speakerId String
  joinedAt  DateTime @default(now())

  @@id([speakerId, eventId])
}

/// @deprecated Use `Premise` instead
model Place {
  id                     String              @id @default(cuid())
  name                   String              @default("Place")
  title                  String              @default("Place")
  description            String              @default("Description")
  typeOfPremises         String[]
  rules                  String?             @default("Rules")
  area                   Float               @default(0)
  owner                  User                @relation(fields: [ownerId], references: [id])
  ownerId                String
  private                Boolean?            @default(true)
  tel                    String?             @db.VarChar(255)
  location               String              @db.VarChar(255)
  coordsLat              Float               @db.Real
  coordsLng              Float               @db.Real
  Event                  Event[]
  organization           Organization?       @relation(fields: [organizationId], references: [id])
  organizationId         String?
  capacity               Int?
  minCapacity            Int?
  maxCapacity            Int?
  ageRestrictions        String              @default("+4")
  parkingArea            String[]
  cameraOrAudioRecording Boolean?
  hasWifi                Boolean             @default(false)
  wifiLogin              String?
  wifiPassword           String?
  amenities              String[]
  locationMapboxId       String              @default("")
  billingMapboxId        String              @default("")
  routeToPremises        String?
  rentalPriceByHour      Float               @default(0)
  cleaningFeePrice       Float               @default(0)
  openingHours           PlaceOpeningHours[]
  resources              PlaceResource[]
  comments               PlaceComment[]
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
}

model PlaceOpeningHours {
  id        String       @id @default(cuid())
  place     Place        @relation(fields: [placeId], references: [id])
  placeId   String
  day       DayOfTheWeek
  openTime  DateTime
  closeTime DateTime
}

enum DayOfTheWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model PlaceComment {
  id        String   @id @default(cuid())
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Float    @default(0.00)
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlaceResource {
  id        String   @id @default(cuid())
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String
  height    Int      @default(200)
  width     Int      @default(100)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id             String                 @id @default(cuid())
  name           String
  owner          User                   @relation(fields: [ownerId], references: [id])
  ownerId        String
  foundationDate Int
  country        String
  city           String
  businessName   String
  NIP            String
  businessRegion BusinessRegion?        @default(EMEA) /// @description Currently only `EMEA` region is used.
  bankName       String
  IBAN           String
  address        Address[] /// @description This is a tuple. Consists of both post and billing addresses. `address[0]` - post, `address[1]` - billing.
  logotype       String?
  socialLinks    SocialLink[]
  places         Place[]
  venues         Venue[]
  resources      OrganizationResourse[]
  slots          PremiseSlot[] // Add this relation to Organization
}

/// @description Currently only `EMEA` region is used.
enum BusinessRegion {
  AMER
  APAC
  EMEA
}

model Address {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  country        String
  city           String
  street         String
  building       String
  room           String?
  zipCode        String
}

model SocialLink {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  network        SocialNetwork
  url            String
}

enum SocialNetwork {
  linkedin
  instagram
  facebook
  threads
}

model OrganizationResourse {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  height         Int          @default(720)
  width          Int          @default(405)
  url            String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Venue {
  id               String       @id @default(cuid())
  slug             String       @unique
  name             String
  image            String
  description      String
  organization     Organization @relation(fields: [organizationId], references: [id])
  organizationId   String
  premises         Premise[]
  locationMapboxId String
  locationTutorial String
  featureCCTV      Boolean
  featureParking   Boolean
  featureAge       Int
  manager          Manager[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Premise {
  id                String             @id @default(cuid())
  slug              String             @unique
  venue             Venue              @relation(fields: [venueId], references: [id])
  venueId           String
  name              String
  description       String
  room              String?
  floor             String?
  type              String?            @default("")
  area              Float?
  capacity          Int?
  slots             PremiseSlot[]
  openHours         PremiseOpenHours[]
  resources         PremiseResource[]
  discounts         PremiseDiscount[]
  rules             String?            @default("Rules")
  amenities         String[]
  direction         String?            @default("Direction")
  bookingCancelTerm String?            @default("Booking cancel term")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PremiseOpenHours {
  id        String           @id @default(cuid())
  premise   Premise          @relation(fields: [premiseId], references: [id])
  premiseId String
  pricing   PremisePricing[]
  day       DayOfTheWeek
  openTime  DateTime
  closeTime DateTime
  price     Float /// @description currently is used for 1 hour intervals
}

enum BookingType {
  blocked_by_admin
  via_website
}

model PremiseSlot {
  id              String             @id @default(cuid())
  type            BookingType        @default(via_website)
  premise         Premise            @relation(fields: [premiseId], references: [id])
  premiseId       String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  paymentIntentId String
  amount          Float              @default(0)
  discountAmount  Float              @default(0)
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  status          TicketIntentStatus
  createdAt       DateTime           @default(now())
  organizationId  String
  organization    Organization       @relation(fields: [organizationId], references: [id])
  @@index([organizationId])
}

/// @deprecated pricing is set directly to the `PremiseOpenHours` model
model PremisePricing {
  id                 String           @id @default(cuid())
  premiseOpenHours   PremiseOpenHours @relation(fields: [premiseOpenHoursId], references: [id])
  premiseOpenHoursId String
  priceForHour       Float
  startTime          DateTime
  endTime            DateTime
}

model PremiseResource {
  id        String   @id @default(cuid())
  premise   Premise  @relation(fields: [premiseId], references: [id])
  premiseId String
  height    Int      @default(720)
  width     Int      @default(405)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PremiseDiscount {
  id                 String  @id @default(cuid())
  premise            Premise @relation(fields: [premiseId], references: [id])
  premiseId          String
  duration           Int
  discountPercentage Float
}

model Manager {
  id          String @id @default(cuid())
  firstname   String
  lastname    String
  email       String
  phoneNumber String
  venue       Venue  @relation(fields: [venueId], references: [id])
  venueId     String
}
